#include <stdio.h>
#include <stdlib.h>
// 定义双向链表节点结构
struct Node {
    int data;                  // 节点数据
    struct Node* prev;         // 指向前一个节点的指针
    struct Node* next;         // 指向后一个节点的指针
};
// 在双向链表中插入节点
void insert(struct Node** head_ref, int data) {
    // 为新节点分配内存
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    // 设置新节点的数据
    new_node->data = data;
    // 新节点的前驱指针指向NULL
    new_node->prev = NULL;
    // 新节点的后继指针指向头节点
    new_node->next = *head_ref;
    // 如果链表不为空，调整头节点的前驱指针
    if (*head_ref != NULL) {
        (*head_ref)->prev = new_node;
    }
    // 更新链表头指针为新节点
    *head_ref = new_node;
}
// 在双向链表中删除节点
void deleteNode(struct Node** head_ref, struct Node* node) {
    // 如果要删除的节点是头节点
    if (*head_ref == node) {
        *head_ref = node->next;    // 更新头节点
    }
    // 调整被删除节点的前驱指针
    if (node->prev != NULL) {
        node->prev->next = node->next;
    }
    // 调整被删除节点的后继指针
    if (node->next != NULL) {
        node->next->prev = node->prev;
    }
    // 释放被删除节点的内存
    free(node);
}
// 在双向链表中查找节点
struct Node* search(struct Node* head, int key) {
    struct Node* current = head;
    // 在链表中遍历查找
    while (current != NULL) {
        if (current->data == key)
            return current;
        current = current->next;
    }
    return NULL; // 如果没有找到返回NULL
}
// 释放双向链表
void freeList(struct Node** head_ref) {
    struct Node* current = *head_ref;
    struct Node* next;
    // 逐个释放节点内存
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
    // 将头指针设为NULL
    *head_ref = NULL;
}
// 打印双向链表（正向）
void printForward(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
// 打印双向链表（反向）
void printBackward(struct Node* head) {
    struct Node* current = head;
    // 找到链表的最后一个节点
    while (current->next != NULL) {
        current = current->next;
    }
    // 反向遍历链表并打印数据
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->prev;
    }
    printf("\n");
}
// 验证双向链表操作
int main() {
    struct Node* head = NULL;    // 链表头指针
    // 插入操作
    insert(&head, 5);
    insert(&head, 10);
    insert(&head, 15);
    insert(&head, 20);
    printf("正向打印链表： ");
    printForward(head);
    printf("反向打印链表： ");
    printBackward(head);
    // 查找操作
    struct Node* search_node = search(head, 10);
    if (search_node != NULL) {
        printf("找到节点 %d\n", search_node->data);
    } else {
        printf("未找到节点\n");
    }
    // 删除操作
    deleteNode(&head, head);    // 删除头节点
    deleteNode(&head, head->next->next);   // 删除第三个节点
    printf("删除后的链表： ");
    printForward(head);
    // 释放链表
    freeList(&head);
    printf("释放后的链表： ");
    printForward(head);
    return 0;
}
