#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
typedef struct {
    int data[MAX_SIZE];
    int top;  // 栈顶指针，指向栈顶元素索引
} Stack;
// 初始化栈
void initStack(Stack *stack) {
    stack->top = -1;  // 空栈时，栈顶指针为-1
}
// 判断栈是否为空
int isEmpty(Stack *stack) {
    return (stack->top == -1);
}
// 判断栈是否已满
int isFull(Stack *stack) {
    return (stack->top == MAX_SIZE - 1);
}
// 入栈
void push(Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push element.\n");
        return;
    }
    stack->top++;
    stack->data[stack->top] = value;
}
// 出栈
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop element.\n");
        return -1;  // 返回一个特殊值表示出错
    }
    int value = stack->data[stack->top];
    stack->top--;
    return value;
}
// 获取栈顶元素
int peek(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return -1;  // 返回一个特殊值表示出错
    }
    return stack->data[stack->top];
}
// 释放栈结构
void freeStack(Stack *stack) {
    free(stack);
}
// int main() {
    // Stack *stack = (Stack *)malloc(sizeof(Stack));
    // initStack(stack);
    // push(stack, 1);
    // push(stack, 2);
    // push(stack, 3);
    // printf("Top element: %d\n", peek(stack));
    // printf("Pop element: %d\n", pop(stack));
    // printf("Pop element: %d\n", pop(stack));
    // printf("Pop element: %d\n", pop(stack));
    // freeStack(stack);
    // return 0;
// }
