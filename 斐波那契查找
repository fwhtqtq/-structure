#include <stdio.h>
// 定义斐波那契查找函数
int FibonacciSearch(int arr[], int n, int target) {
    int fib2 = 0; // 初始化较小的斐波那契数为0
    int fib1 = 1; // 初始化较大的斐波那契数为1
    int fib = fib1 + fib2; // 初始化当前斐波那契数为fib1+fib2
    // 找到大于或等于n的最小斐波那契数
    while (fib < n) {
        fib2 = fib1;
        fib1 = fib;
        fib = fib1 + fib2; // 计算下一个斐波那契数
    }
    int offset = -1; // 初始化偏移量为-1
    // 在较大的斐波那契数和较小的斐波那契数之间进行查找
    while (fib > 1) {
        // 计算当前指针位置
        int i = (offset + fib2) < (n - 1) ? (offset + fib2) : (n - 1);
        // 判断当前指针位置的元素与目标元素的关系
        if (arr[i] == target) {
            return i; // 目标元素找到，返回位置
        } else if (arr[i] < target) {
            // 目标元素比当前指针位置的元素大，缩小左侧区间
            fib = fib1;
            fib1 = fib2;
            fib2 = fib - fib1;
            offset = i;
        } else {
            // 目标元素比当前指针位置的元素小，缩小右侧区间
            fib = fib2;
            fib1 = fib1 - fib2;
            fib2 = fib - fib1;
        }
    }
    // 处理边界情况
    if (fib1 == 1 && arr[offset + 1] == target) {
        return offset + 1; // 目标元素找到，返回位置
    }
    return -1; // 返回-1表示未找到目标元素
}
// int main() {
    // int arr[] = {1, 3, 5, 7, 9, 11, 13, 15}; // 已排序的数组
    // int n = sizeof(arr) / sizeof(arr[0]); // 数组长度
    // int target = 9; // 要查找的目标元素
    // int index = FibonacciSearch(arr, n, target); // 调用斐波那契查找函数
    //根据查找结果输出相应信息
    // if (index != -1) {
        // printf("目标元素 %d 在数组中的位置是 %d\n", target, index);
    // } else {
        // printf("目标元素 %d 未在数组中找到\n", target);
    // }
    // return 0;
// }
