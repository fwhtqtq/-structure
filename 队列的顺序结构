#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
typedef struct {
    int data[MAX_SIZE];
    int top;
} Stack;
void initStack(Stack* stack){
    stack->top = -1;
}
int isEmpty(Stack* stack){
    return stack->top == -1;
}
int isFull(Stack* stack){
    return stack->top == MAX_SIZE - 1;
}
void push(Stack* stack, int value){
    if(isFull(stack)){
        printf("Stack is full. Cannot push element.\n");
        return;
    }
    stack->top++;
    stack->data[stack->top] = value;
}
int pop(Stack* stack){
    if(isEmpty(stack)){
        printf("Stack is empty. Cannot pop element.\n");
        return -1;
    }
    int value = stack->data[stack->top];
    stack->top--;
    return value;
}
int peek(Stack* stack){
    if(isEmpty(stack)){
        printf("Stack is empty. Cannot peek element.\n");
        return -1;
    }
    return stack->data[stack->top];
}
void freeStack(Stack* stack){
    stack->top = -1;
}
// int main(){
    // Stack stack;
    // initStack(&stack);
    // push(&stack, 1);
    // push(&stack, 2);
    // push(&stack, 3);
  
    // printf("Stack top: %d\n", peek(&stack));//1
  
    // 删除栈顶元素
    // printf("Pop element: %d\n", pop(&stack));
    // 插入新元素
    // push(&stack, 4);
  
    // printf("Stack top: %d\n", peek(&stack));
    // freeStack(&stack);
    // return 0;
// }
