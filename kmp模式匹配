#include <stdio.h>
#include <string.h>
#include <stdlib.h>
// 构建模式串的next数组
void computeNextArray(char* pattern, int* next) {
    int patternLen = strlen(pattern);
    int i = 0, j = -1;
    next[0] = -1;
    
    while (i < patternLen) {
        while (j >= 0 && pattern[i] != pattern[j])
            j = next[j];
        
        i++;
        j++;
        next[i] = j;
    }
}
// 使用KMP算法进行模式匹配
int kmpPatternMatching(char* text, char* pattern) {
    int textLen = strlen(text);
    int patternLen = strlen(pattern);
    int* next = (int*)malloc(sizeof(int) * patternLen);
    computeNextArray(pattern, next);
    int i = 0, j = 0;
    while (i < textLen) {
        while (j >= 0 && text[i] != pattern[j])
            j = next[j];
        
        i++;
        j++;
        
        // 找到匹配的模式串
        if (j == patternLen) {
            free(next);
            return i - j;
        }
    }
    
    free(next);
    return -1; // 未找到匹配的模式串
}
// int main() {
    // char text[] = "ABABDABACDABABCABAB";
    // char pattern[] = "ABABCABAB";
    // 使用KMP算法检查模式串是否出现在主串中
    // int pos = kmpPatternMatching(text, pattern);
    // 根据匹配结果进行相应处理
    // if (pos != -1) {
        // printf("Pattern found at position: %d\n", pos);
    // } else {
        // printf("Pattern not found.\n");
    // }
    // return 0;
// }
