 #include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_EDGES 100
#define MAX_VERTICES 100
// 边的结构体
typedef struct Edge {
    int src;
    int dest;
    int weight;
} Edge;
// 图的结构体
typedef struct Graph {
    int numVertices;
    int numEdges;
    Edge** edges;
} Graph;
// 创建图
Graph* createGraph(int numVertices, int numEdges) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->numEdges = numEdges;
    graph->edges = (Edge**)malloc(numEdges * sizeof(Edge*));
    for (int i = 0; i < numEdges; i++) {
        graph->edges[i] = (Edge*)malloc(sizeof(Edge));
    }
    return graph;
}
// 添加边
void addEdge(Graph* graph, int index, int src, int dest, int weight) {
    graph->edges[index]->src = src;
    graph->edges[index]->dest = dest;
    graph->edges[index]->weight = weight;
}
// 比较函数：根据边的权值来排序
int compare(const void* a, const void* b) {
    Edge* edge1 = *(Edge**)a;
    Edge* edge2 = *(Edge**)b;
    return edge1->weight - edge2->weight;
}
// 查找父节点
int findParent(int* parent, int vertex) {
    if (parent[vertex] == vertex) {
        return vertex;
    }
    return findParent(parent, parent[vertex]);
}
// 将两个集合合并
void unionSets(int* parent, int* rank, int vertex1, int vertex2) {
    int root1 = findParent(parent, vertex1);
    int root2 = findParent(parent, vertex2);
    if (rank[root1] < rank[root2]) {
        parent[root1] = root2;
    }
    else if (rank[root1] > rank[root2]) {
        parent[root2] = root1;
    }
    else {
        parent[root2] = root1;
        rank[root1]++;
    }
}
// 打印最小生成树
void printMST(Edge** mstEdges, int numEdges) {
    printf("Edge     Weight\n");
    for (int i = 0; i < numEdges; i++) {
        printf("%d - %d    %d\n", mstEdges[i]->src, mstEdges[i]->dest, mstEdges[i]->weight);
    }
}
// 卡鲁斯卡尔算法
void kruskalMST(Graph* graph) {
    int numVertices = graph->numVertices;
    int numEdges = graph->numEdges;
    Edge** edges = graph->edges;
    // 将边按权值排序
    qsort(edges, numEdges, sizeof(Edge*), compare);
    // 给每个节点初始化父节点和秩
    int* parent = (int*)malloc(numVertices * sizeof(int));
    int* rank = (int*)malloc(numVertices * sizeof(int));
    for (int i = 0; i < numVertices; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
    // 初始化最小生成树边数组
    Edge** mstEdges = (Edge**)malloc((numVertices - 1) * sizeof(Edge*));
    int edgeCount = 0;
    int i = 0;
    while (edgeCount < numVertices - 1 && i < numEdges) {
        Edge* currEdge = edges[i++];
        int srcRoot = findParent(parent, currEdge->src);
        int destRoot = findParent(parent, currEdge->dest);
        // 如果两个顶点的父节点不同，说明当前边不会形成环
        if (srcRoot != destRoot) {
            mstEdges[edgeCount++] = currEdge;
            unionSets(parent, rank, srcRoot, destRoot);
        }
    }
    // 打印最小生成树的边和权值
    printMST(mstEdges, numVertices - 1);
    // 释放内存
    for (int i = 0; i < numEdges; i++) {
        free(edges[i]);
    }
    free(edges);
    free(parent);
    free(rank);
    free(mstEdges);
}
// 主函数
// int main() {
    // int numVertices = 5;
    // int numEdges = 7;
    // Graph* graph = createGraph(numVertices, numEdges);
    
    // addEdge(graph, 0, 0, 1, 2);
    // addEdge(graph, 1, 0, 3, 6);
    // addEdge(graph, 2, 1, 2, 3);
    // addEdge(graph, 3, 1, 3, 8);
    // addEdge(graph, 4, 1, 4, 5);
    // addEdge(graph, 5, 2, 4, 7);
    // addEdge(graph, 6, 3, 4, 9);
    
    // printf("Minimum Spanning Tree (Kruskal's Algorithm):\n");
    // kruskalMST(graph);
    
    //释放内存
    // free(graph);
    
    // return 0;
// }
