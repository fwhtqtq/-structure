 //普利姆算法逻辑
//这段代码实现了普利姆算法来查找一个连通图的最小生成树。首先，我们根据图的顶点数量创建了一个空的图。然后，使用addEdge函数添加边。在主函数中，我们创建了一个包含5个顶点的图，并手动添加了7条边。接下来，调用primMST函数来计算最小生成树并打印结果。
// 算法逻辑：


// 创建一个空的最小生成树（MST）集合，存储最小生成树的边。

// 初始化一个权值数组和访问数组，分别用于保存顶点权值和访问状态。

// 设置起始顶点，将其权值设为0。

// 从权值数组中选择权值最小且未被访问的顶点作为当前顶点。

// 将当前顶点标记为已访问，并更新其邻接顶点的权值和父节点。

// 重复步骤4和步骤5，直到所有顶点都被访问。

// 打印最小生成树的边和权值。
// 你可以根据需要更改图的顶点数量和边的连接关系进行验证。
// 记得在使用完毕后，使用 free() 函数释放动态分配的内存。在示例中，通过释放内存来避免内存泄漏。

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
#define MAX_VERTICES 100
#define INF INT_MAX
// 边的结构体
typedef struct Edge {
    int src;
    int dest;
    int weight;
} Edge;
// 图的结构体
typedef struct Graph {
    int numVertices;
    int** adjacencyMatrix;
} Graph;
// 创建图
Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->adjacencyMatrix = (int**)malloc(numVertices * sizeof(int*));
    for (int i = 0; i < numVertices; i++) {
        graph->adjacencyMatrix[i] = (int*)malloc(numVertices * sizeof(int));
        for (int j = 0; j < numVertices; j++) {
            graph->adjacencyMatrix[i][j] = 0;
        }
    }
    return graph;
}
// 添加边
void addEdge(Graph* graph, int src, int dest, int weight) {
    graph->adjacencyMatrix[src][dest] = weight;
    graph->adjacencyMatrix[dest][src] = weight;
}
// 找到与当前顶点最小权值的邻接顶点
int findMinVertex(int* weights, bool* visited, int numVertices) {
    int minVertex = -1;
    for (int i = 0; i < numVertices; i++) {
        if (!visited[i] && (minVertex == -1 || weights[i] < weights[minVertex])) {
            minVertex = i;
        }
    }
    return minVertex;
}
// 打印最小生成树
void printMST(int* parent, int** adjacencyMatrix, int numVertices) {
    printf("Edge     Weight\n");
    for (int i = 1; i < numVertices; i++) {
        printf("%d - %d    %d\n", parent[i], i, adjacencyMatrix[i][parent[i]]);
    }
}
// 普利姆算法
void primMST(Graph* graph) {
    int numVertices = graph->numVertices;
    int* parent = (int*)malloc(numVertices * sizeof(int));
    int* weights = (int*)malloc(numVertices * sizeof(int));
    bool* visited = (bool*)malloc(numVertices * sizeof(bool));
    // 初始化权值和访问数组
    for (int i = 0; i < numVertices; i++) {
        weights[i] = INF;
        visited[i] = false;
    }
    // 设置起始顶点
    parent[0] = -1;
    weights[0] = 0;
    for (int i = 0; i < numVertices - 1; i++) {
        // 找到与当前顶点最小权值的邻接顶点
        int minVertex = findMinVertex(weights, visited, numVertices);
        visited[minVertex] = true;
        
        // 更新权值和父节点
        for (int j = 0; j < numVertices; j++) {
            if (graph->adjacencyMatrix[minVertex][j] != 0 && !visited[j] &&
                graph->adjacencyMatrix[minVertex][j] < weights[j]) {
                parent[j] = minVertex;
                weights[j] = graph->adjacencyMatrix[minVertex][j];
            }
        }
    }
    // 打印最小生成树
    printMST(parent, graph->adjacencyMatrix, numVertices);
    // 释放内存
    free(parent);
    free(weights);
    free(visited);
}
// 主函数
// int main() {
    // int numVertices = 5;
    // Graph* graph = createGraph(numVertices);
    
    // addEdge(graph, 0, 1, 2);
    // addEdge(graph, 0, 3, 6);
    // addEdge(graph, 1, 2, 3);
    // addEdge(graph, 1, 3, 8);
    // addEdge(graph, 1, 4, 5);
    // addEdge(graph, 2, 4, 7);
    // addEdge(graph, 3, 4, 9);
    
    // printf("Minimum Spanning Tree (Prim's Algorithm):\n");
    // primMST(graph);
    
    //释放内存
    // for (int i = 0; i < numVertices; i++) {
        // free(graph->adjacencyMatrix[i]);
    // }
    // free(graph->adjacencyMatrix);
    // free(graph);
    
    // return 0;
// }
