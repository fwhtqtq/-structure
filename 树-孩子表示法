#include <stdio.h>
#include <stdlib.h>
#define MAX_TREE_SIZE 100  // 树的最大节点数
typedef struct TreeNode {
    int data;               // 节点数据
    struct TreeNode *child; // 孩子节点
    struct TreeNode *sibling; // 兄弟节点
} TreeNode;
typedef struct Tree {
    TreeNode *root;         // 根节点
} Tree;
// 初始化树
void initTree(Tree *tree) {
    tree->root = NULL;
}
// 创建节点
TreeNode* createNode(int data) {
    TreeNode *newNode = (TreeNode*) malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        printf("Error: Failed to allocate memory for new node.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->child = NULL;
    newNode->sibling = NULL;
    return newNode;
}
// 添加子节点
void addChild(TreeNode *parent, TreeNode *child) {
    // 如果父节点没有孩子节点，则直接将孩子节点作为父节点的孩子
    if (parent->child == NULL) {
        parent->child = child;
    } else {
        TreeNode *sibling = parent->child;
        // 遍历到兄弟节点链表的末尾
        while (sibling->sibling != NULL) {
            sibling = sibling->sibling;
        }
        // 在兄弟节点链表的末尾添加新的孩子节点
        sibling->sibling = child;
    }
}
// 验证树的孩子表示法
int verifyChildArray(Tree *tree) {
    if (tree->root == NULL) {
        printf("Error: Tree is empty.\n");
        return 0;
    }
    return 1;
}
// 打印树节点
void printTree(TreeNode *node, int depth) {
    for (int i = 0; i < depth; i++) {
        printf("\t");
    }
    printf("%d\n", node->data);
    if (node->child != NULL) {
        printTree(node->child, depth + 1);
    }
    if (node->sibling != NULL) {
        printTree(node->sibling, depth);
    }
}
int main() {
    Tree tree;
    initTree(&tree);
    // 创建节点
    TreeNode *rootNode = createNode(1); // 根节点
    TreeNode *child1 = createNode(2);  // 子节点1
    TreeNode *child2 = createNode(3);  // 子节点2
    TreeNode *child3 = createNode(4);  // 子节点3
    // 添加子节点
    addChild(rootNode, child1);
    addChild(rootNode, child2);
    addChild(rootNode, child3);
    tree.root = rootNode;
    
    // 验证树的孩子表示法
    int isValid = verifyChildArray(&tree);
    if (isValid) {
        printf("Child array is valid.\n");
    } else {
        printf("Child array is invalid.\n");
    }
    
    // 打印树
    printf("Tree:\n");
    printTree(tree.root, 0);
    return 0;
}
