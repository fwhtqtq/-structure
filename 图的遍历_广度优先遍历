 #include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
// 邻接表节点
typedef struct AdjListNode {
    int destVertex;                 // 目标顶点
    struct AdjListNode* next;       // 下一个节点
} AdjListNode;
// 队列结构体
typedef struct Queue {
    int front, rear, capacity;
    int* array;
} Queue;
// 创建队列
Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = -1;
    queue->rear = -1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}
// 判断队列是否为空
int isEmpty(Queue* queue) {
    return (queue->front == -1);
}
// 入队
void enqueue(Queue* queue, int item) {
    queue->array[++queue->rear] = item;
    if (queue->front == -1) {
        queue->front = 0;
    }
}
// 出队
int dequeue(Queue* queue) {
    int item = queue->array[queue->front];
    if (queue->front == queue->rear) {
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front++;
    }
    return item;
}
// 创建图
typedef struct Graph {
    int vertexNum;                  // 顶点数量
    AdjListNode** adjLists;         // 邻接表数组
    int* visited;                   // 访问数组，用于标记已访问的顶点
} Graph;
// 创建图
Graph* createGraph(int vertexNum) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->vertexNum = vertexNum;
    graph->adjLists = (AdjListNode**)malloc(graph->vertexNum * sizeof(AdjListNode*));
    graph->visited = (int*)malloc(graph->vertexNum * sizeof(int));
    
    // 初始化邻接表数组和访问数组
    for (int i = 0; i < graph->vertexNum; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    
    return graph;
}
// 添加边
void addEdge(Graph* graph, int srcVertex, int destVertex) {
    // 创建新的邻接表节点
    AdjListNode* newNode = (AdjListNode*)malloc(sizeof(AdjListNode));
    newNode->destVertex = destVertex;
    newNode->next = graph->adjLists[srcVertex];
    graph->adjLists[srcVertex] = newNode;
    
    // 无向图需添加反向边
    newNode = (AdjListNode*)malloc(sizeof(AdjListNode));
    newNode->destVertex = srcVertex;
    newNode->next = graph->adjLists[destVertex];
    graph->adjLists[destVertex] = newNode;
}
// 广度优先遍历
void BFS(Graph* graph, int startVertex) {
    // 创建队列并标记起始顶点为已访问
    Queue* queue = createQueue(graph->vertexNum);
    graph->visited[startVertex] = 1;
    enqueue(queue, startVertex);
    
    while (!isEmpty(queue)) {
        // 出队并输出
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);
        // 遍历与当前顶点相连的顶点
        AdjListNode* adjNode = graph->adjLists[currentVertex];
        while (adjNode != NULL) {
            int adjVertex = adjNode->destVertex;
            if (graph->visited[adjVertex] == 0) {
                graph->visited[adjVertex] = 1;
                enqueue(queue, adjVertex);
            }
            adjNode = adjNode->next;
        }
    }
    
    free(queue); // 释放队列内存
}
// 主函数
// int main() {
    // int vertexNum = 5;
    // Graph* graph = createGraph(vertexNum);
    
    // addEdge(graph, 0, 1);
    // addEdge(graph, 0, 2);
    // addEdge(graph, 1, 2);
    // addEdge(graph, 2, 0);
    // addEdge(graph, 2, 3);
    // addEdge(graph, 3, 3);
    
    // printf("Breadth First Traversal (BFS):\n");
    // BFS(graph, 2);
    // printf("\n");
    
    // 释放内存
    // for (int i = 0; i < vertexNum; i++) {
        // AdjListNode* adjNode = graph->adjLists[i];
        // while (adjNode != NULL) {
            // AdjListNode* temp = adjNode;
            // adjNode = adjNode->next;
            // free(temp);
        // }
    // }
    // free(graph->adjLists);
    // free(graph->visited);
    // free(graph);
    
    // return 0;
// }
